;Regs:
;
;INPUT REGISTERS
;
;r0: 0 register
;r1: num items
;r2: array address
;r3: item counter
;r4: item
;r5: 8 (byte)
;r6: offset
;r7: count
;r8: Item Address
;
;SEARCH REGISTERS
;
;r10: item to search
;r11: low
;r12: high
;r13: middle
;r14: 2 (divisor)
;r15: Midpoint address
;r16: Midpoint value
;r17: Difference in value
;r18: Output
;
;LABEL REGISTERS
;
;r22: Start
;r23: NewHigh
;r24: NewLow
;r25: Items
;r26: FinishRead
;r27: BinSearch
;r28: NotFound
;r29: Proceed
;
;MISC REGISTERS
;r30: output port (3)

.code
;make sure number of items is greater than 0 and also load necessary registers
    clr r0
    clr r7
    ld r30, 3
    ld r22, :Start
    ld r23, :NewHigh
    ld r24, :NewLow
    ld r25, :Items
    ld r26, :FinishRead
    ld r27, :BinSearch
    ld r28, :NotFound
    ld r29, :Proceed
    in r1, r0
    brgt r22, r1, r0
    halt

:Start
;Load array address
    ld r2, 86016
    mov r3, r1

:Items
;Load Items
    subi r3, 1
    brgt r26, r0, r3
    in r4, r0
    ld r5, 8
    mul r6, r7, r5
    addi r7, 1
    add r8, r2, r6
    mov (r8)(0), r4
    br r25

:FinishRead
;Read search item
    in r10, r0
    mov r11, r0         
    mov r12, r1
    subi r12, 1

:BinSearch
    brgt r28, r11, r12
    add r13, r11, r12
    ld r14, 2
    div r13, r13, r14
    mul r15, r13, r5
    add r15, r2, r15
    mov r16, (r15)(0)
;Compare search key with midpoint value
    sub r17, r10, r16
    brnz r29, r17
;Key found
    ld r18, 0x646E756F66
    out r30, r18
    halt

:Proceed
;Shift r17 right by 63 bits to extract the sign bit.
    shftri r17, 63
;If the sign bit is nonzero then r17 is negative (i.e. search key < array[mid])
    brnz r23, r17
;Otherwise, search key > array[mid]

:NewLow
;Set low = mid + 1
    mov r11, r13
    addi r11, 1 
    br r27

:NewHigh
;Set high = mid - 1
    mov r12, r13
    subi r12, 1
    br r27

:NotFound
;Key not found: output "not found" to port 3.
    ld r18, 0x64756F66746F6E
    out r30, r18
    halt